 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
	En la captura se aprecia que hay 954 paquetes. Podemos saberlo ya que aparece reflejado en el numero de secuencia

 ** ¿Cuánto tiempo dura la captura?
	La captura dura 56.149345 segundos. Podemos saberlo consultando el ultimo paquete en Time

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
	La captura se ha efectuado en la maquina 192.168.1.34. Es una IP privada porque pertenece a la clase C. 

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
 	En el apartado Protocol Hierarchy vemos que es mayor el tráfico UDP, 98.94%, ya que el de TCP es 0.75%. Si es consistente con una aplicacion que transmite en tiempo real, ya que UDP es un protocolo que, si se pierde un paquete no retrasnmite y no seria eficaz que nos lleguen paquetes con mucho retardo.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
	Podemos ver IP, DNS, SIP, Simple Traversal of UDP Through NAT, RTP, H.261, RTCP, HTTP, ICMP y ARP.

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
	Hay 25 paquetes que tienen lugar en los siguientes segundos: 7.343770, 7.425202, 7.427990, 7.512211, 7.567714, 7.567714, 7.648107, 14.426793, 14.599871, 14.610573, 16.233522, 16.334756, 16.343704, 16.460741, 38.119195, 38.362649, 38.362673, 38.937875, 39.154151, 39.204022, 39.229683, 55.694378, 55.774638, 55.776662,55.859934.

 ** Y los paquetes con RTP, ¿cuándo se envían?
	Los paquetes RTP se envian continuamente del segundo 17 al segundo 38.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
	En estas tramas se utiliza DNS ya que queremos averiguar la direccion IP de Ekiga.

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
	La dirección IP del servidor que ha lanzado Ekiga es 80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
	La direccion que devuelve el servidor de nombres es 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
	Nos devuelve 35.162.64.86.in-addr.arpa que significa que la direccion IP de Ekiga es la 86.64.162.35 porque DNS utiliza el metodo de resolucion inversa.


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
	   La URL que se esta pidiendo es http://ekiga.net/ip/. Lo comprobamos llendo al paquete HTTP, en el campo Full request URI
 
 ** ¿Qué user agent (UA) la está pidiendo?
	El User Agent es Ekiga. Lo comprobamos en el campo User Agent del apartado HTTP

 ** ¿Qué devuelve el servidor?
	Para comprobarlo vamos al paquete en el que se envía un 200 OK. Vamos al apartado de HTTP, en el campo Line-based text data: text/html vemos que se devuelve una IP que es la IP pública de la máquina 192.168.1.34.

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
	Recibimos una ip publica que, concretamente, es nuestra IP pública.

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
	Segun la Wikipedia, STUN (sigla en inglés de Session Traversal Utilities for NAT) es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT. 
 ** ¿Estamos tras un NAT?
	Sí, dado que estamos utilizando el protocolo STUN

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
	86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
	Dst Prt: sip (5060)
 ** ¿Qué método SIP utiliza el UA para registrarse?
	Session Initiation Protocol (REGISTER)
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
	Allow: INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
	 No, ya que en el paquete 51 nos llega un error
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
	Deberíamos de haber recibido un 200 OK si se realiza correctamente.
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
	En el correcto, se incluye el campo sip.Authorization, lo que hace que en el primer intento la longitud sea de 523, y en el segundo de 712.
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
	Es de 3600 segundos. Lo comprobamos consultando el campo Message Header, en Expires


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
	En el paquete INVITE podemos ver en el apartado de SIP en el campo Message Header y posteriormente en el campo From vemos que la llamada la ha realizado Gregorio Robles cuya direccion SIP es grex@ekiga.net.

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
	El contenido de la trama lo vemos en el campo Session Initiation Protocol, en Message Body. En este campo podemos ver que se emplea el protocolo SDP (Session Description Protocol). Además vemos que contiene información de la sesión que se quiere establecer, como por ejemplo información sobre la versión de protocolo que se emplea, el creador de la sesión, información de la conexión, el momento en el que se realiza la conexión, la descripción de medios con atributos. 

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
	El primer intento de INVITE no tiene éxito. Esto lo podemos ver en la trama 85, en la que el servidor envía un mensaje de 407 Proxy Authentication Required. Esto se debe a que el servidor proxy requiere que se autentique.

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
 En el segundo INVITE podemos ver que el tamaño del paquete es superior (1181 bytes) respecto al primer intento (744 bytes). El paquete es mayor debido a que en el segundo intento se incluye la línea: Proxy-Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439f6ba5f681cd945fb7c40529fd1e0f28a81", uri="sip:500@ekiga.net", algorithm=md5, response="9a5627c14a8a433bd308d2ec54777240". Vemos que se ha incluido el campo Proxy Authorization, que es un campo necesario para poder establecer la conexión. De esta forma la conexión se establecerá con éxito.

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
	 Podemos ver en las tramas siguientes que se utilizan los protocolos: RTP, H.261, RTCP y ARP.

    El protocolo RTP (Real-time Transport Protocol) es un protocolo de nivel de sesión utilizado para la transmisión de información en tiempo real, como por ejemplo audio y vídeo en una video-conferencia.
    
    H.261 funciona sobre RTP y permite la compresión de audio, video, videoconferencias.

    El protocolo RTCP (Rel-time Transport Control Protocol) es utilizado para enviar datos de control entre el emisor y receptor de una secuencia RTP. Los paquetes RTCP son enviados aproximadamente cada cinco segundos, y contienen datos que ayudan a verificar las condiciones de transmisión en el extremo remoto. 
    
    El protocolo ARP (Address Resolution Protocol) es un protocolo de comunicaciones de la capa de enlace de datos, responsable de encontrar la dirección de hardware (Ethernet MAC) que corresponde a una determinada dirección IP. Para ello se envía un paquete (ARP request) a la dirección de difusión de la red (broadcast, MAC = FF FF FF FF FF FF) que contiene la dirección IP por la que se pregunta, y se espera a que esa máquina (u otra) responda (ARP reply) con la dirección Ethernet que le corresponde. Cada máquina mantiene una caché con las direcciones traducidas para reducir el retardo y la carga. ARP permite a la dirección de Internet ser independiente de la dirección Ethernet, pero esto solo funciona si todas las máquinas lo soportan.
 
 ** ¿Cuál es el tamaño de paquete de los mismos?
	El tamaño de los paquetes RTP es de 214 bytes, para RTCP de 102 bytes. EL tamaño de H.261 es variable.

 ** ¿Se utilizan bits de padding?
	No se utilizan bits de padding, ya que se puede ver que en la trama en el campo Padding aparece False.

 ** ¿Cuál es la periodicidad de los paquetes que se envían?
	La periodicidad de los paquetes que se envían la podemos comprobar en el campo timestamp. Para poder calcular esta peridiocidad tenemos que mirar un paquete G.711, donde podemos ver que se transmite a 64kb/s, además conocemos el timestamp (160), es decir, que seremos capaces de enviar 50 paquetes (64000/(8*160)) de 1280 bits (64000/50) por segundo. Es decir, el periodo será 1/50, que es 0.02 segundos.

 ** ¿Cuántos bits/segundo estamos enviando?
	Vemos que estamos enviando a 64000 bit por segundo.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
	Para poder ver los flujos RTP vamos a Telephony, pinchamos en la opción RTP y ahí en Show all streams. Aquí, podemos observar que hay dos flujos: uno es un flujo de audio en el puerto 5010 con codificación g.711 y otro de vídeo en el puerto 5014 con codificación h261.
 ** ¿Cuántos paquetes se pierden?
	En Show all streams podemos ver los paquetes perdidos en el campo Lost. En este campo vemos que no se pierde ningún paquete ya que te marca 0.0%.

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
	El mayor valor del delta es 1290,479000 ms para el flujo de vídeo, y 1290,444000 ms para el flujo de audio. El valor de delta indica el valor de tiempo máximo existente entre un paquete y el anterior en el envío de paquetes RTP.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
Los valores de jitter máximo los miramos en Max Jitter (ms), y son los siquientes: para el caso del vídeo es de 183,095775 ms, y para el caso del audio es de 119,635154 ms. Los valores de jitter medio los miramos en Mean Jitter (ms), y son los siguientes: para el flujo de vídeo es de 153,240269 ms, y para el flujo de audio es de 42,500200 ms. Los paquetes del transmisor pueden llegar a su destino con diferentes retardos. Un retardo de un paquete varía impredeciblemente con su posición en las colas de los ruteadores a lo largo del  camino entre el transmisor y el destino. Esta variación en retardo se conoce como jitter y puede afectar seriamente la calidad del flujo de audio y/o vídeo. El jitter entre el punto inicial y final de la comunicación debiera ser ser inferior a 100 ms. En nuestro caso el jitter medio en audio es de 42,500200ms, es decir, que podemos considerar que es una conversación de calidad.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
	PACKET  DELTA(ms) FILTERED JITTER(ms)
	 113     0.00      O.OO

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
	Sí, porque es el primer paquete con el número de secuencia más pequeño.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
	El paquete 246 es el último que tiene un jitter menor de 10ms.

 ** ¿A qué se debe el cambio tan brusco del jitter?
	 Este cambio tan brusco del jitter se debe a un cambio también muy brusco en el valor de delta, que ahora es de 554,74ms, esto implica un cambio muy grande en la velocidad de transimisión de los paquetes.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
	Podemos ver que si que es comparable, ya que como hemos visto anteriormente el jitter varía en función del valor de la delta, que nos da la diferencia de teimpo entre el envío de un paquete y el anterior. En este caso al tener un aumento considerable de la delta el paquete llegará mucho más tarde comparado con los paquetes enviados con anterioridad.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
	 El jitter mantiene una relación directa con el tiempo (el retardo), entonces, si no uno aumenta bruscamente, el otro también.

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
	 Vemos que la conversación empieza en el 14.426793 y terminca en el 39.229683 por lo que la llamada dura 24.80289 segundos.

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
Los SSRCs los vemos en las tramas en Synchronization Source Identifier. En nuestra captura tenemos dos SSRC-. una de audio y otra de vídeo:
    En los paquetes de G.711 (paquetes de audio) vemos que nos encontramos con: Synchronization Source identifier: 0xbf4afd37 (3209362743), por lo que en este caso el SSRC es 
    0xbf4afd37 (3209362743).
    En los paquetes de H.261 (paquetes de vídeo) observamos que tenemos: Synchronization Source identifier: 0x43306582 (1127245186), es decir, el SSRC será  0x43306582 (1127245186)
    Tenemos varios paquetes SSRCs porque tenemos dos flujos: uno de audio y otro de vídeo.
    Para poder ver si hay CSRCs tenemos que mirar en el campo Contributing source identifiers count, que aparecerá con valor cero si no hay CSRCs y con otro valor si existe CSRC. Si no hay CSRC quiere decir que nuetsros SSRCs no pasan por mezcladores. En RTP vemos que encontramos el campo Contributing source identifiers count a cero, es decir, no hay CSRCs. En paquetes de RTCP se ve que el campo de CSRC aparece a uno.

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
	El método SIP que se utiliza para finalizar la conversación es BYE.

 ** ¿En qué trama(s)?
	ste método de SIP se envían en las tramas 924, 925, 927 y 933.
 ** ¿Por qué crees que se envía varias veces?
	Vemos que se envía varias veces porque aún el servidor no ha enviado un 200 OK (estos se envían en las tramas 938, 939, 940 y 941). Esto se debe a que RTP emplea UDP, que es un protocolo no fiable, entonces se envían varias veces estas tramas para asegurarse de que llega el mensaje al otro extremo, es decir, se emplea la retransmisión para mantener fiabilidad.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
	En el paquete que se incluye el método REGISTER en el final de la comunicación vemos que se envía el campo Expires con valo 0. Esto quiere decir que el usuario envía este mensaje para poder darse de baja, es decir, que el servidor le borre de la lista y poder terminar la sesión.

 ** ¿En qué trama sucede esto?
	Paquete 952.

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
	El campo Expires. En el inicio, tenía un valor de 3600 segundos, y ahora, como hemos dicho en la primera pregunta, es de 0 segundos.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
	Se usa DNS y STUN para ver si se está detrás de un NAT o si es una red pública o privada; en este caso, estamos usando la IP pública, y por lo tanto no necesitaremos ninguno de los dos protocolos anteriores.
 ** ¿Son diferentes el registro y la descripción de la sesión?
Podemos ver que son diferentes en el campo Allow, ya que el REGISTER que hemos capturado tiene el siguiente campo: 
    Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,SUBSCRIBE,NOTIFY,REFER,MESSAGE,INFO,PING,PRACK, es decir, permite los métodos que se mencionan en dicho campo. 
    En cambio en la captura que analizamos con anterioridad podemos observar que el campo Allow era más reducido, ya que solamente permitía los métodos: INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE.
    Otra de las diferencias es que se emplean puertos distintos.

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
	Cuando empleamos Telephony, RTP, Show All Streams, podemos ver los flujos existentes. En nuestro caso vamos que hay dos flujos de audio, codificado en g.711. Uno de los flujos va en la dirección desde nosotros que somos emisores hacia un receptor, y el otro flujo va en el sentido contrario.

 ** ¿Cuál es su periodicidad?
	Podemos ver que que la diferencia del timestamp en este caso es 160 también, por lo tanto la periodicidad sigue siendo la misma que en la captura anterior, es decir, 0,02 segundos.

 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
	En el caso del flujo del emisor de la llamada, el valor máximo de delta es 32,534000 ms; el valor medio del jitter es 3,244855 ms; y el valor del máximo jitter es 5,172200 ms.
	En el caso del flujo de la otra dirección, el valor máximo de delta es 30,750000 ms; el valor medio del jitter es 3,133588 ms; y el valor del máximo jitter es 5,175524 ms.

 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
	Para poder reproducir la conversación desde Wireshark, debemos ir a Telephony y elegir la opción VoIP Calls, después primero damos a Play y luego Decode, y de esta forma se reproduce.
Al reproducir con un buffer de jitter muy pequeño la conversación se escucha entrecortada, se pierden palabras, lo he comprobado con un buffer de 5ms y no es muy buena la calidad.

 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
	sip:9999@qxip.net ofrece un servicio de canciones como podemos observar al reproducir el audio.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
